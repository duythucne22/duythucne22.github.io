<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Posts on Fang Yuan</title>
    <link>http://example.org/posts/</link>
    <description>Recent content in Posts on Fang Yuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>hcdtdayneg@gmail.com (d.thuc)</managingEditor>
    <webMaster>hcdtdayneg@gmail.com (d.thuc)</webMaster>
    <copyright>©2024, All Rights Reserved</copyright>
    <lastBuildDate>Wed, 20 Nov 2024 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Duy Tan University CTF 2024</title>
        <link>http://example.org/posts/2024/isitdtuctf2024quals/</link>
        <pubDate>Wed, 20 Nov 2024 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Wed, 20 Nov 2024 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2024/isitdtuctf2024quals/</guid>
        <description>Pwn shellcode 1 Analysis It&amp;rsquo;a Shellcoding Challenge with a seccomp filter.
# line CODE JT JF K# =================================# 0000: 0x20 0x00 0x00 0x00000004 A = arch# 0001: 0x15 0x00 0x0a 0xc000003e if (A != ARCH_X86_64) goto 0012# 0002: 0x20 0x00 0x00 0x00000000 A = sys_number# 0003: 0x35 0x00 0x01 0x40000000 if (A &amp;lt; 0x40000000) goto 0005# 0004: 0x15 0x00 0x07 0xffffffff if (A != 0xffffffff) goto 0012# 0005: 0x15 0x06 0x00 0x00000000 if (A == read) goto 0012# 0006: 0x15 0x05 0x00 0x00000001 if (A == write) goto 0012# 0007: 0x15 0x04 0x00 0x00000002 if (A == open) goto 0012# 0008: 0x15 0x03 0x00 0x0000003b if (A == execve) goto 0012# 0009: 0x15 0x02 0x00 0x000000f0 if (A == mq_open) goto 0012# 0010: 0x15 0x01 0x00 0x00000101 if (A == openat) goto 0012# 0011: 0x06 0x00 0x00 0x7fff0000 return ALLOW# 0012: 0x06 0x00 0x00 0x00000000 return KILL open, read, write, execve syscall is blocked.</description>
        
        <dc:creator>f4ng yu4n</dc:creator>
        <media:content url="http://example.orgimages/ctf/duytan.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>shellcode</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>PWN</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Flare On 11</title>
        <link>http://example.org/posts/2024/flareon11/</link>
        <pubDate>Fri, 01 Nov 2024 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Fri, 01 Nov 2024 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2024/flareon11/</guid>
        <description>First time playing flare on, alone :(, and this happen during my midterm exam , so dont really have much time playing it, just manage to solve up to challenge 5 still stuck a little there, I&amp;rsquo;m so noob, gonna try harder next time.
Challenge 1 – frog The source code :
1 2 3 4 5 # are they on the victory tile? if so do victory if player.x == victory_tile.</description>
        
        <dc:creator>fang yuan</dc:creator>
        <media:content url="http://example.orgimages/ctf/flare-on11.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>Rev</category>
            
          
            
              <category>flare on</category>
            
          
        
        
          
            
              <category>Rev</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>ATTTSV 2024</title>
        <link>http://example.org/posts/2024/ascis2024/</link>
        <pubDate>Mon, 28 Oct 2024 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Mon, 28 Oct 2024 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2024/ascis2024/</guid>
        <description>(I will Update, redo later if i am free :)) )
A little sad that i was on other team, and the Quals did not got any pwn challenge, so just help the other team to get Khuyen Khich award heehe:))
Run 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #!</description>
        
        <dc:creator>f4ng yu4n</dc:creator>
        <media:content url="http://example.orgimages/ctf/ASCIS.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>Pwn</category>
            
          
        
        
      </item>
      
      <item>
        <title>Patriot CTF 2024</title>
        <link>http://example.org/posts/2024/patriotctf2024/</link>
        <pubDate>Sat, 28 Sep 2024 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Sat, 28 Sep 2024 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2024/patriotctf2024/</guid>
        <description>shrimple strings only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from pwn import * def malloc(): p.sendline(b&amp;#39;1&amp;#39;) p.sendlineafter(b&amp;#34;Size &amp;gt; &amp;#34;, b&amp;#39;16&amp;#39;) p.recvuntil(b&amp;#39;&amp;gt; &amp;#39;) def write(idx, string): p.sendline(b&amp;#39;2&amp;#39;) p.sendlineafter(b&amp;#39;Index &amp;gt; &amp;#39;, idx) p.</description>
        
        <dc:creator>f4ng yu4n</dc:creator>
        <media:content url="http://example.orgimages/ctf/patriot.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>PWN</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Sekai CTF 2024</title>
        <link>http://example.org/posts/2024/sekaictf2024/</link>
        <pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Sun, 01 Sep 2024 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2024/sekaictf2024/</guid>
        <description>Crack Me Developed for SekaiCTF 2022 but never got a chance to release it. Can you log in and claim the flag?Crack Me is an android application that asks for a email and password.
Exploit When opening the app we are greeting with a login screen:
Inspecting the internals of the app with jadx shows us in com.SekaiCTF.CrackMe.MainApplication that we are dealing with a ReactNative application.
Time to look for the JavaScript&amp;hellip; which we can find in the assets/index.</description>
        
        <dc:creator>fang yuan</dc:creator>
        <media:content url="http://example.orgimages/ctf/Sekai.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Reverse</category>
            
          
            
              <category>Pwn</category>
            
          
            
              <category>heap</category>
            
          
        
        
          
            
              <category>Writeup</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Pearl CTF 2024</title>
        <link>http://example.org/posts/2024/pearctf2024/</link>
        <pubDate>Sat, 24 Aug 2024 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Sat, 24 Aug 2024 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2024/pearctf2024/</guid>
        <description>Pwn adventure Use stack pivoting for this challenge
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 from pwn import * context.</description>
        
        <dc:creator>fang yuan</dc:creator>
        <media:content url="http://example.orgimages/ctf/pearl.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Reverse</category>
            
          
        
        
          
            
              <category>Writeup</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Google CTF 2024 Writeup</title>
        <link>http://example.org/posts/2024/googlectf2024/</link>
        <pubDate>Sun, 30 Jun 2024 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Sun, 30 Jun 2024 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2024/googlectf2024/</guid>
        <description>This year wn challenge was so hard, it also got lot of crypto encryption inside that :((
Encrypted runner Description:
You won&#39;t be able to run anything but ls, echo or date, hahahaha!
In the challenge, chal.py will only encrypt safe commands (date, echo, ls).
Our goal is to somehow encrypt arbitary commands (and send it to the remote).
Leaking private aes key If you try encrypting and decrypting characters above 255, you can see this:</description>
        
        <dc:creator>fang yuan</dc:creator>
        <media:content url="http://example.orgimages/ctf/google.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>pwn</category>
            
          
        
        
          
            
              <category>PWN</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Asis CTF Writeup</title>
        <link>http://example.org/posts/2023/asisctf2023/</link>
        <pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Thu, 02 Nov 2023 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2023/asisctf2023/</guid>
        <description>PWN hipwn Checksec
1 2 3 4 5 6 7 8 9 10 $ checksec chall [*] &amp;#39;/mnt/c/Users/duyth/Downloads/chall&amp;#39; Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled SHSTK: Enabled IBT: Enabled Stripped: No main function:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 int __cdecl main(int argc, const char **argv, const char **envp) { unsigned int nbytes; // [rsp+Ch] [rbp-54h] BYREF char nbytes_4[72]; // [rsp+10h] [rbp-50h] BYREF unsigned __int64 v6; // [rsp+58h] [rbp-8h] v6 = __readfsqword(0x28u); setbuf(_bss_start, 0LL); setbuf(stdin, 0LL); while ( 1 ) { puts(&amp;#34;How much?</description>
        
        <dc:creator>fang yuan</dc:creator>
        <media:content url="http://example.orgimages/ctf/asis.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>ROP</category>
            
          
        
        
          
            
              <category>PWN</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Wanna Game CTF by UIT 2023</title>
        <link>http://example.org/posts/2023/wannagame2023/</link>
        <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Thu, 28 Sep 2023 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2023/wannagame2023/</guid>
        <description></description>
        
        <dc:creator>f4ng yu4n</dc:creator>
        <media:content url="http://example.orgimages/ctf/Dice.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>reverseing</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>RE</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Google CTF 2023</title>
        <link>http://example.org/posts/2023/googlectf2023/</link>
        <pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Wed, 28 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2023/googlectf2023/</guid>
        <description></description>
        
        <dc:creator>f4ng yu4n</dc:creator>
        <media:content url="http://example.orgimages/ctf/google.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>reverseing</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>RE</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Angstrom CTF 2023</title>
        <link>http://example.org/posts/2023/angstromctf2023/</link>
        <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Thu, 27 Apr 2023 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2023/angstromctf2023/</guid>
        <description>checkers checkers
This one very easy, just look into IDA or using anything to view strings.
Flag: actf{ive_be3n_checkm4ted_21d1b2cebabf983f}
zaza nc challs.actf.co 32760
zaza
This challenge have 3 check, a number, sussy check, and a string:
That number is 4919 and the second number is any.
After that, This challenge get our input and xor with string:
&amp;quot;anextremelycomplicatedkeythatisdefinitelyuselessss&amp;quot;
and compare with:
&amp;quot;2&amp;amp; =$!-( &amp;lt;*+*( ?!&amp;amp;$$6,. )&#39; $19 , #9=!1 &amp;lt;*=6 &amp;lt;6;66#&amp;quot;</description>
        
        <dc:creator>fang yuan</dc:creator>
        <media:content url="http://example.orgimages/ctf/angstrom.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Reverse</category>
            
          
        
        
          
            
              <category>Writeup</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>TetCTF 2023</title>
        <link>http://example.org/posts/2023/tetctf2023/</link>
        <pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Thu, 12 Jan 2023 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2023/tetctf2023/</guid>
        <description>TetCTF 2023 - pwn01 You can download challenge files in my repo: pwn01.zip
1. Find bug &amp;amp; Generate idea In main(), there are 3 options for us to choose:
However, we cannot do anything except login so that&amp;rsquo;s the first thing we need to do. Here is the result from IDA for function login():
Maybe because a large space for each variabel so IDA seems to work wrong when defining variables, so we need to use debugger to test our input to check if there are any bug when we input data.</description>
        
        <dc:creator>f4ng yu4n</dc:creator>
        <media:content url="http://example.orgimages/ctf/tet.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>Pwn</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Pwnable.tw Writeups</title>
        <link>http://example.org/posts/pwnable.tw/</link>
        <pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Fri, 04 Nov 2022 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/pwnable.tw/</guid>
        <description>Pwnable.tw Start - 100pts Leak address Nothing&amp;rsquo;s interesting except the highlighted ROP, it will help us print out 0x14 bytes of data on esp as you can see mov ecx, esp. When in GDB, we can also see that there will be a lot of stack address:
So leaking one of them will help us get the pointer point to our shellcode. And that ROP gadget is at _start+38, which means after that print out, it will get input from us again.</description>
        
        <dc:creator>fang yuan</dc:creator>
        
        
        
        
          
            
              <category>pwn</category>
            
          
            
              <category>bof</category>
            
          
            
              <category>heap</category>
            
          
            
              <category>rop</category>
            
          
        
        
          
            
              <category>Writeup</category>
            
          
        
        
          
            
              <category>trainning</category>
            
          
        
      </item>
      
      <item>
        <title>DiceCTF 2022 Writeups</title>
        <link>http://example.org/posts/2022/dicectf2022/</link>
        <pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Wed, 06 Jul 2022 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2022/dicectf2022/</guid>
        <description>ctf.dicega.ng - baby-rop Challenge link: https://ctf.dicega.ng/challs
You can also download challenge file from my repo: baby-rop.zip
There will be 5 files in zip:
babyrop ld-linux-x86-64.so.2 libc.so.6 seccomp-bpf.h uaf.c You can use patchelf or attached file &amp;ldquo;patch.sh&amp;rdquo; to patch file.
Disclamer: This repo for studying purpose only. Origin writeup here.
And when everything&amp;rsquo;s ready, let&amp;rsquo;s start!
1. Find bug First, we will use file to check information of challenge:
babyrop: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter .</description>
        
        <dc:creator>fang yuan</dc:creator>
        <media:content url="http://example.orgimages/ctf/Dice.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>ROP</category>
            
          
        
        
          
            
              <category>PWN</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Amateurs CTF 2023</title>
        <link>http://example.org/posts/2023/amateursctf2023/</link>
        <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Tue, 28 Jun 2022 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2023/amateursctf2023/</guid>
        <description></description>
        
        <dc:creator>f4ng yu4n</dc:creator>
        <media:content url="http://example.orgimages/ctf/Dice.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>reverseing</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>RE</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>CORCTF2022</title>
        <link>http://example.org/posts/2022/corctf2022/</link>
        <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Tue, 28 Jun 2022 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2022/corctf2022/</guid>
        <description>Microsoft Linux Description:
Microsoft&amp;rsquo;s latest addition to the world of Open Source: a flag checker&amp;hellip;
Attachment file:
m&amp;lt;3l.exe
Open file with DiE:
elf file but end with .exe. run in linux env
lib elf.dll usage
inital code view
Take our input and store in byte_100111 loop 18 times, take each char from our input then rol 0xd and compare with byte_100210.
After check return Incorect :( or $Well done! Sadly, Microsoft has embraced, extended and extinguished the other half of the flag :(&amp;hellip;</description>
        
        <dc:creator>f4ng yu4n</dc:creator>
        <media:content url="http://example.orgimages/ctf/Dice.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>reverseing</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>RE</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Google CTF 2022</title>
        <link>http://example.org/posts/2022/googlectf2022/</link>
        <pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Tue, 21 Jun 2022 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2022/googlectf2022/</guid>
        <description>Google CTF 2022 - FixedASLR Reference source https://chovid99.github.io/posts/google-ctf-2022/
https://github.com/nobodyisnobody/write-ups/tree/main/Google.CTF.2022/pwn/FixedASLR
Original challenge link: https://capturetheflag.withgoogle.com/challenges/pwn-fixedaslr
You can also download challenge files in my repo: fixedaslr.zip
Download and extract the zip, then we can get started!
1. Find bug First, let&amp;rsquo;s check the basic information of all files:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ file * loader: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=71086f1a8e8132c20313b70de229555e4f551144, not stripped basic.</description>
        
        <dc:creator>f4ng yu4n</dc:creator>
        <media:content url="http://example.orgimages/ctf/Dice.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>reverseing</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>RE</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>HCMUS CTF 2022</title>
        <link>http://example.org/posts/2022/hcmusctf2022/</link>
        <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Sun, 12 Jun 2022 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2022/hcmusctf2022/</guid>
        <description>HCMUS CTF 2022 - Timehash You can download the zip in my repo: Timehash.zip
There will be 1 file in zip:
timehash 1. Analyze This is a forensic challenge so we don&amp;rsquo;t need to use checksec, just decompile the file with ghidra to get the flow. First, we will look at main:
It will check if argc is equal to 2 or not and will exit if not. Nothing to notice.</description>
        
        <dc:creator>f4ng yu4n</dc:creator>
        <media:content url="http://example.orgimages/ctf/Dice.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>reverseing</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>RE</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>DownUnder CTF 2022 Writeups</title>
        <link>http://example.org/posts/2022/downunderctf2022/</link>
        <pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Wed, 08 Jun 2022 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/2022/downunderctf2022/</guid>
        <description></description>
        
        <dc:creator>f4ng yu4n</dc:creator>
        <media:content url="http://example.orgimages/ctf/Dice.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>ctf</category>
            
          
            
              <category>reverseing</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>RE</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Reversing.kr Training Writeups</title>
        <link>http://example.org/posts/reversing.kr/</link>
        <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Thu, 10 Feb 2022 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/reversing.kr/</guid>
        <description>Reversing.kr practice Write-up Easy Crack - 100pts Initial analysis with DiE , we have a PE32 file
Open with IDA, at function DialogFunc have sub_401080, use winapi GetDlgItemTextA and MessageBoxA, take value from input to String, comapre then message.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int __cdecl sub_401080(HWND hDlg) { CHAR String[97]; // [esp+4h] [ebp-64h] BYREF __int16 v3; // [esp+65h] [ebp-3h] char v4; // [esp+67h] [ebp-1h] memset(String, 0, sizeof(String)); v3 = 0; v4 = 0; GetDlgItemTextA(hDlg, 1000, String, 100); if ( String[1] !</description>
        
        <dc:creator>fang yuan</dc:creator>
        
        
        
        
          
            
              <category>practice</category>
            
          
            
              <category>reverseing</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>Writeup</category>
            
          
        
        
          
            
              <category>trainning</category>
            
          
        
      </item>
      
      <item>
        <title>Trainning ROP EMPORIUM</title>
        <link>http://example.org/posts/rop-emporium/</link>
        <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Sat, 06 Nov 2021 00:00:00 +0000</atom:modified>
        <guid>http://example.org/posts/rop-emporium/</guid>
        <description>Writeup — ROP Emporium Challenge 01: ret2win Our aim is overflow to control RIP.
The input buffer is 32 bytes, but the input area allows 56 bytes. This allow overwriting the saved RBP and RIP.
Exploit: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from pwn import * p = process(&amp;#34;./ret2win&amp;#34;) elf = ELF(&amp;#34;./ret2win&amp;#34;) payload = &amp;#34;A&amp;#34; * 40 payload += p64(elf.symbols[&amp;#34;ret2win&amp;#34;]) open(&amp;#39;payload&amp;#39;, &amp;#39;w&amp;#39;).</description>
        
        <dc:creator>fang yuan</dc:creator>
        
        
        
        
          
            
              <category>Training</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>rop</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>Writeup</category>
            
          
        
        
          
            
              <category>trainning</category>
            
          
        
      </item>
      

    
  </channel>
</rss>
