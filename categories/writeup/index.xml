<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Writeup on Fang Yuan</title>
    <link>https://duythucne22.github.io/categories/writeup/</link>
    <description>Recent content in Writeup on Fang Yuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>hcdtdayneg@gmail.com (d.thuc)</managingEditor>
    <webMaster>hcdtdayneg@gmail.com (d.thuc)</webMaster>
    <copyright>Â©2024, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 01 Sep 2024 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://duythucne22.github.io/categories/writeup/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Sekai CTF 2024</title>
        <link>https://duythucne22.github.io/posts/2024/sekaictf2024/</link>
        <pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Sun, 01 Sep 2024 00:00:00 +0000</atom:modified>
        <guid>https://duythucne22.github.io/posts/2024/sekaictf2024/</guid>
        <description>Crack Me Developed for SekaiCTF 2022 but never got a chance to release it. Can you log in and claim the flag?Crack Me is an android application that asks for a email and password.
Exploit When opening the app we are greeting with a login screen:
Inspecting the internals of the app with jadx shows us in com.SekaiCTF.CrackMe.MainApplication that we are dealing with a ReactNative application.
Time to look for the JavaScript&amp;hellip; which we can find in the assets/index.</description>
        
        <dc:creator>fang yuan</dc:creator>
        <media:content url="https://duythucne22.github.io/images/ctf/Sekai.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Reverse</category>
            
          
            
              <category>Pwn</category>
            
          
            
              <category>heap</category>
            
          
        
        
          
            
              <category>Writeup</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Pearl CTF 2024</title>
        <link>https://duythucne22.github.io/posts/2024/pearctf2024/</link>
        <pubDate>Sat, 24 Aug 2024 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Sat, 24 Aug 2024 00:00:00 +0000</atom:modified>
        <guid>https://duythucne22.github.io/posts/2024/pearctf2024/</guid>
        <description>Pwn adventure Use stack pivoting for this challenge
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 from pwn import * context.</description>
        
        <dc:creator>fang yuan</dc:creator>
        <media:content url="https://duythucne22.github.io/images/ctf/pearl.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Reverse</category>
            
          
        
        
          
            
              <category>Writeup</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Angstrom CTF 2023</title>
        <link>https://duythucne22.github.io/posts/2023/angstromctf2023/</link>
        <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Thu, 27 Apr 2023 00:00:00 +0000</atom:modified>
        <guid>https://duythucne22.github.io/posts/2023/angstromctf2023/</guid>
        <description>checkers checkers
This one very easy, just look into IDA or using anything to view strings.
Flag: actf{ive_be3n_checkm4ted_21d1b2cebabf983f}
zaza nc challs.actf.co 32760
zaza
This challenge have 3 check, a number, sussy check, and a string:
That number is 4919 and the second number is any.
After that, This challenge get our input and xor with string:
&amp;quot;anextremelycomplicatedkeythatisdefinitelyuselessss&amp;quot;
and compare with:
&amp;quot;2&amp;amp; =$!-( &amp;lt;*+*( ?!&amp;amp;$$6,. )&#39; $19 , #9=!1 &amp;lt;*=6 &amp;lt;6;66#&amp;quot;</description>
        
        <dc:creator>fang yuan</dc:creator>
        <media:content url="https://duythucne22.github.io/images/ctf/angstrom.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Reverse</category>
            
          
        
        
          
            
              <category>Writeup</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Pwnable.tw Writeups</title>
        <link>https://duythucne22.github.io/posts/pwnable.tw/</link>
        <pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Fri, 04 Nov 2022 00:00:00 +0000</atom:modified>
        <guid>https://duythucne22.github.io/posts/pwnable.tw/</guid>
        <description>Pwnable.tw Start - 100pts Leak address Nothing&amp;rsquo;s interesting except the highlighted ROP, it will help us print out 0x14 bytes of data on esp as you can see mov ecx, esp. When in GDB, we can also see that there will be a lot of stack address:
So leaking one of them will help us get the pointer point to our shellcode. And that ROP gadget is at _start+38, which means after that print out, it will get input from us again.</description>
        
        <dc:creator>fang yuan</dc:creator>
        
        
        
        
          
            
              <category>pwn</category>
            
          
            
              <category>bof</category>
            
          
            
              <category>heap</category>
            
          
            
              <category>rop</category>
            
          
        
        
          
            
              <category>Writeup</category>
            
          
        
        
          
            
              <category>trainning</category>
            
          
        
      </item>
      
      <item>
        <title>Reversing.kr Training Writeups</title>
        <link>https://duythucne22.github.io/posts/reversing.kr/</link>
        <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Thu, 10 Feb 2022 00:00:00 +0000</atom:modified>
        <guid>https://duythucne22.github.io/posts/reversing.kr/</guid>
        <description>Reversing.kr practice Write-up Easy Crack - 100pts Initial analysis with DiE , we have a PE32 file
Open with IDA, at function DialogFunc have sub_401080, use winapi GetDlgItemTextA and MessageBoxA, take value from input to String, comapre then message.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int __cdecl sub_401080(HWND hDlg) { CHAR String[97]; // [esp+4h] [ebp-64h] BYREF __int16 v3; // [esp+65h] [ebp-3h] char v4; // [esp+67h] [ebp-1h] memset(String, 0, sizeof(String)); v3 = 0; v4 = 0; GetDlgItemTextA(hDlg, 1000, String, 100); if ( String[1] !</description>
        
        <dc:creator>fang yuan</dc:creator>
        
        
        
        
          
            
              <category>practice</category>
            
          
            
              <category>reverseing</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>Writeup</category>
            
          
        
        
          
            
              <category>trainning</category>
            
          
        
      </item>
      
      <item>
        <title>Pwn simple exploit</title>
        <link>https://duythucne22.github.io/notes/note/</link>
        <pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Fri, 04 Feb 2022 00:00:00 +0000</atom:modified>
        <guid>https://duythucne22.github.io/notes/note/</guid>
        <description>Bof Fmt Heap </description>
        
        <dc:creator>fang yuan</dc:creator>
        
        
        
        
          
            
              <category>pwn</category>
            
          
            
              <category>bof</category>
            
          
            
              <category>heap</category>
            
          
            
              <category>rop</category>
            
          
        
        
          
            
              <category>Writeup</category>
            
          
        
        
          
            
              <category>trainning</category>
            
          
        
      </item>
      
      <item>
        <title>Trainning ROP EMPORIUM</title>
        <link>https://duythucne22.github.io/posts/rop-emporium/</link>
        <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
        <author>hcdtdayneg@gmail.com (d.thuc)</author>
        <atom:modified>Sat, 06 Nov 2021 00:00:00 +0000</atom:modified>
        <guid>https://duythucne22.github.io/posts/rop-emporium/</guid>
        <description>Writeup â ROP Emporium Challenge 01: ret2win Our aim is overflow to control RIP.
The input buffer is 32 bytes, but the input area allows 56 bytes. This allow overwriting the saved RBP and RIP.
Exploit: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from pwn import * p = process(&amp;#34;./ret2win&amp;#34;) elf = ELF(&amp;#34;./ret2win&amp;#34;) payload = &amp;#34;A&amp;#34; * 40 payload += p64(elf.symbols[&amp;#34;ret2win&amp;#34;]) open(&amp;#39;payload&amp;#39;, &amp;#39;w&amp;#39;).</description>
        
        <dc:creator>fang yuan</dc:creator>
        
        
        
        
          
            
              <category>Training</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>rop</category>
            
          
            
              <category>writeups</category>
            
          
        
        
          
            
              <category>Writeup</category>
            
          
        
        
          
            
              <category>trainning</category>
            
          
        
      </item>
      

    
  </channel>
</rss>
